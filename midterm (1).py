# -*- coding: utf-8 -*-
"""Midterm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oWnyOcC87Qq45YwREomw9pohaIPosBmZ
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
!pip install joypy
import joypy as jp
games = pd.read_csv('/content/drive/MyDrive/Winter 2022/CSC 302/Video_Games_Sales_as_at_22_Dec_2016.csv')

"""Displaying the average global sales revenue by publisher"""

averages = games.groupby('Publisher')['Global_Sales'].sum()
print(averages)

"""Density Curve 
------------------
This graph displays market saturation for the different genres during a period of time. This can be an indicator of an over saturated market or to find what genres were selling well during a time period. 
"""

sns.displot(games, x="Year_of_Release", kind="kde", hue = "Genre")
plt.title("Popular Genres by Year")

"""Boxplot

This graph is displaying how well games sold in North America based on Game Genre. / Jake
E- Everyone 
M - Mature 
T - Teen 
E10+ - Everyone 10+
K-A - Kids to Adults 
AO - Adults Only 
EC - Early Childhood 
RP - Rating Pending 
"""

sns.stripplot(data=games, x='Rating', y='NA_Sales')
plt.title("North American Sales by Rating")

df = games.dropna()
sns.stripplot(data=df, x='Rating', y='NA_Sales')
plt.title("North American Sales by Rating")

"""Displaying best selling platforms by North America, Europe, and Japan"""

games.groupby(['Platform']).sum().plot(kind='pie', y='NA_Sales', legend=False)
plt.title("Platform Sales by North America")
games.groupby(['Platform']).sum().plot(kind='pie', y='EU_Sales', legend=False)
plt.title("Platform Sales by Europe")
games.groupby(['Platform']).sum().plot(kind='pie', y='JP_Sales', legend=False)
plt.title("Platform Sales by Japan")

"""Critic Score by Publisher """

import pandas as pd

df = games.dropna()
X = list(df.iloc[:, 3])
Y = list(df.iloc[:, 10])
  

# Plot the data using bar() method
plt.bar(X, Y, color='g')
plt.title("Critic Scores by Genre")
plt.xlabel("Genre")
plt.ylabel("Critic Score")
plt.xticks(rotation=45)